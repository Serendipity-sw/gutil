// Copyright 2009 The Go Authors. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// Package log implements a simple logging package. It defines a type, Logger,
// with methods for formatting output. It also has a predefined 'standard'
// Logger accessible through helper functions Print[f|ln], Fatal[f|ln], and
// Panic[f|ln], which are easier to use than creating a Logger manually.
// That logger writes to standard error and prints the date and time
// of each logged message.
// The Fatal functions call os.Exit(1) after writing the log message.
// The Panic functions call panic after writing the log message.
package glog

import (
	"fmt"
	"io"
	"os"
	"runtime"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota     // the date: 2009/01/23
	Ltime                         // the time: 01:23:23
	Lmicroseconds                 // microsecond resolution: 01:23:23.123123.  assumes Ltime.
	Llongfile                     // full file name and line number: /a/b/c/d.go:23
	Lshortfile                    // final file name element and line number: d.go:23. overrides Llongfile
	LstdFlags     = Ldate | Ltime // initial values for the standard logger

	maxCacheLength  = 8192
	maxCacheSeconds = 2
)

type outputer struct {
	prefix map[int]string
	out    map[int]io.WriteCloser
	// for performance
	buf map[int][]byte
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu     sync.Mutex // ensures atomic writes; protects the following fields
	flag   int        // properties
	out    outputer   // destination for output
	buf    []byte     // for accumulating text to write
	items  int64
	nbytes int64
	level  int
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *[]byte, i int, wid int) {
	var u uint = uint(i)
	if u == 0 && wid <= 1 {
		*buf = append(*buf, '0')
		return
	}

	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}
	*buf = append(*buf, b[bp:]...)
}

func (l *Logger) formatHeader(lv int, buf *[]byte, t time.Time, file string, line int) {
	if l.flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if l.flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if l.flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if l.flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}
	if l.flag&(Lshortfile|Llongfile) != 0 {
		if l.flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	}
	*buf = append(*buf, l.out.prefix[lv]...)
	*buf = append(*buf, []byte(" ")...)
}

// Output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) Output(lv int, calldepth int, s string) error {
	now := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	if l.flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}

	l.buf = l.buf[:0]
	l.formatHeader(lv, &l.buf, now, file, line)
	l.buf = append(l.buf, s...)
	if len(s) > 0 && s[len(s)-1] != '\n' {
		l.buf = append(l.buf, '\n')
	}
	l.items++
	n, err := l.out.Write(lv, l.buf)
	l.nbytes += int64(n)

	return err
}
func (l *Logger) Level() int {
	return l.level
}

func (l *Logger) SetLevel(level int) {
	l.level = level
}

// Printf calls l.Output to print to the logger.
// Arguments are handled in the manner of fmt.Printf.
func (l *Logger) Debug(format string, v ...interface{}) {
	if DebugLevel >= l.level {
		l.Output(DebugLevel, 2, fmt.Sprintf(format, v...))
	}
}

func (l *Logger) Info(format string, v ...interface{}) {
	if InfoLevel >= l.level {
		l.Output(InfoLevel, 2, fmt.Sprintf(format, v...))
	}
}

func (l *Logger) Warn(format string, v ...interface{}) {
	if WarnLevel >= l.level {
		l.Output(WarnLevel, 2, fmt.Sprintf(format, v...))
	}
}

func (l *Logger) Error(format string, v ...interface{}) {
	if ErrorLevel >= l.level {
		l.Output(ErrorLevel, 2, fmt.Sprintf(format, v...))
	}
}

// Fatal is equivalent to l.Print() followed by a call to os.Exit(1).
func (l *Logger) Fatal(format string, v ...interface{}) {
	if FatalLevel >= l.level {
		l.Output(FatalLevel, 2, fmt.Sprintf(format, v...))
	}
	os.Exit(1)
}

// Panicf is equivalent to l.Printf() followed by a call to panic().
func (l *Logger) Panic(format string, v ...interface{}) {
	s := fmt.Sprintf(format, v...)
	if PanicLevel >= l.level {
		l.Output(PanicLevel, 2, s)
	}
	panic(s)
}

// Flags returns the output flags for the logger.
func (l *Logger) Flags() int {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.flag
}

// SetFlags sets the output flags for the logger.
func (l *Logger) SetFlags(flag int) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.flag = flag
}

// GetPrefix returns the output prefix
func (l *Logger) GetPrefix() map[int]string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out.prefix
}

// Prefix returns the output prefix for the logger.
func (l *Logger) Prefix(lv int) string {
	l.mu.Lock()
	defer l.mu.Unlock()
	return l.out.prefix[lv]
}

// SetPrefix sets the output prefix for the logger.
func (l *Logger) SetPrefix(lv int, prefix string) {
	l.mu.Lock()
	defer l.mu.Unlock()
	l.out.prefix[lv] = prefix
}

func (o outputer) Write(lv int, buf []byte) (int, error) {
	wr, ok := o.out[lv]
	if !ok {
		return 0, fmt.Errorf("No writer for level %d", lv)
	}
	return wr.Write(buf)
}

func (l *Logger) Close() {
	l.mu.Lock()
	defer l.mu.Unlock()
	for i := DebugLevel; i < LevelCount; i++ {
		l.out.out[i].Close()
	}
}

// 写入文件中
func (l *Logger) Flush() {
}

func (l *Logger) flush() {
	l.mu.Lock()
	for lv, bf := range l.out.buf {
		if len(bf) > 0 {
			l.out.Write(lv, bf)
		}
	}
	l.mu.Unlock()
}

func (l *Logger) flushRoutine() {
	tk := time.NewTicker(time.Second * time.Duration(maxCacheSeconds))
	for {
		select {
		case <-tk.C:
			l.flush()
		}
	}
}
